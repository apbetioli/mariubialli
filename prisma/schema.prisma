generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  email              String    @unique
  name               String?
  clerkId            String?   @unique
  isAdmin            Boolean   @default(false)
  completedLessonIds String[]
  paidAssetIds       String[]
  Event              Event[]
}

model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  name        String
  slug        String    @unique
  description String
  image       String
  groups      Group[]
  published   Boolean   @default(false)
  assets      Asset[]
}

model Group {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  order   Int      @default(0)
  lessons Lesson[]

  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String? @db.ObjectId
}

model Lesson {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  slug  String
  video String
  order Int    @default(0)

  Group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId
}

model Asset {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  image        String
  price        Float
  anchor_price Float  @default(0)
  url          String

  Course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId
}

model Event {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime  @default(now())
  type            EventType
  userId          String    @db.ObjectId
  assetId         String?   @db.ObjectId
  lessonId        String?   @db.ObjectId
  stripeSessionId String?
  value           Float?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EventType {
  PAY
  DOWNLOAD
  WATCH
}
